/* Copyright (C) 2005-2011 Fabio Riccardi */

package com.lightcrafts.utils;

import lombok.Getter;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.ResourceBundle;

/** A container and accessor for static version data, either configured in
  * properties or added to resources at compile time.
  * <p>
  * The compile-time files are generated by the "revision" gradle task, which
  * writes the latest git hash and tag into
  * resources/main/com/lightcrafts/utils/resources/.
  */
public final class Version {

    /**
     * Gets the application's name.
     *
     * @return Returns said name.
     */
    public static String getApplicationName() {
        return m_properties.getString( "app-name" );
    }

    private static @Nullable URL getURLOrNull(String propertyKey) {
        try {
            return new URI(m_properties.getString(propertyKey)).toURL();
        }
        catch (MalformedURLException | URISyntaxException e) {
            return null;
        }
    }

    public static @Nullable URL getApplicationURL() {
        return getURLOrNull("app-URL");
    }

    public static @Nullable URL getHelpURL() {
        return getURLOrNull("Help-URL");
    }

    public static @Nullable URL getVideoLearningCenterURL() {
        return getURLOrNull("VideoLearningCenter-URL");
    }

    public static Map<String, URL> getVideoURLs() {
        Map<String, URL> map = new HashMap<>();
        // TODO put in final video URLs
        map.put("Introduction to Relight", getVideoLearningCenterURL());
        map.put("Advanced Relight", getVideoLearningCenterURL());
        map.put("Introduction to ZoneMapper", getVideoLearningCenterURL());
        map.put("Advanced ZoneMapper", getVideoLearningCenterURL());
        return map;
    }

    /**
     * Reads a given resource.
     *
     * @param name The name of the resource file to read.
     * @return Returns the contents of said resource file as a string.
     */
    private static String readResource( String name ) {
        try {
            final URL url = Version.class.getResource( "resources/" + name );
            if ( url == null ) {
                throw new FileNotFoundException("Revision resource");
            }
            try (InputStream in = url.openStream()) {
                final BufferedReader reader = new BufferedReader(new InputStreamReader(in));
                final StringBuilder sb = new StringBuilder();
                String line;
                do {
                    line = reader.readLine();
                    if ( line != null ) {
                        sb.append( line );
                        sb.append( '\n' );
                    }
                } while ( line != null );

                return sb.toString();
            }
        }
        catch ( Throwable t ) {
            System.err.println( "Failed to read " + name + " resource" );
        }
        return null;
    }

    /**
     * This is where the actual labels for the tags are.
     */
    private static final ResourceBundle m_properties =
        ResourceBundle.getBundle( "com.lightcrafts.utils.resources.Version" );

     /**
      * Git revision number that was current at the time this class was compiled.
      */
    @Getter @NotNull
    private static final String revisionNumber; // Output from "git rev-parse HEAD"

   /**
     * User-presentable version String.
     */
    @Getter @NotNull
    private static final String versionName; // Contents of "version.txt"

    static {
        final String rev = readResource("Revision");
        revisionNumber = (rev != null && 7 < rev.length()) ? rev.substring(0,7) : "";

        final String ver = readResource("Version");
        versionName = ver != null ? ver.trim() : "";
    }
}
/* vim:set et sw=4 ts=4: */
